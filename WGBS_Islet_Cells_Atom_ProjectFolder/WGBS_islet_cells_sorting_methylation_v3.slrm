#!/bin/bash
#SBATCH --mail-user=verda.e.agan@vanderbilt.edu
#SBATCH --mail-type=ALL
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --time=24:00:00
#SBATCH --mem=64G
#SBATCH --output=methylation_SCbeta-%j.out
#SBATCH --error=methylation_SCbeta-%j.error
#SBATCH --job-name=methylation_SCbeta-%j

#filename=$1 --> Alpha_WGBS_rep1_S3
#filename=$1 --> Beta_WGBS_rep1_S2
#filename=$1 --> PH_WGBS
#filename=$1 --> SCbeta_WGBS
#if you're not threading, use only 1 cpu; but if you want the job to finish faster, then you can use >1 cpu

##Necessary to set this for proper sorting##
##LC_ALL is the environment variable that overrides all the other localisation settings##
export LC_ALL=C

##Load modules##
##'Tools' contains a collection of modules needed to run methpipe
module restore tools

##Set variables and paths##
VEA='/data/hodges_lab/aganve/data/DNA_Methylation'
filename=$1
GEN='/data/hodges_lab/hg38_genome/chroms' #contains FASTA format files for each chromosome (.fa)
SIZES='/data/hodges_lab/hg38_genome/hg38.chrom.sizes'

##Echo variables to keep track in .out or .err files##
date
pwd

##Sort mapped reads according to their reference sequence position##
##Reads are sorted by chrom, start, end, strand##
##Sorting takes the whole .mr file into RAM, sorts it into a new file, and spits it out. Beta .mr is 115 GB; alpha .mr is 60 GB##
##May need twice 115GB, so 230GB. Max is 264GB##
##SC beta is 96GB; PH is 123GB##
##Submit each sort command individually with plenty of RAM##
##Sorting beta required 157 GB and 37'; alpha 96 GB and 23'##
# echo "sorting"
# sort -k 1,1 -k 2,2n -k 3,3n -k 6,6 -o ${VEA}/3_mapped_reads/${filename}.sort.mr ${VEA}/3_mapped_reads/${filename}.mr
# echo "sorting complete"

##Remove duplicate reads, or reads that were mapped to identical genomic locations (same chromosome, same start and end, and same strand)##
##The program duplicate-remover chooses a random one to be the representative of the original DNA sequence##
##Removing dups for beta required 8 MB and 22'; alpha 7 MB and 17'##
# echo "remove dups"
# duplicate-remover -S ${VEA}/3_mapped_reads/${filename}_dremove_stat.txt -o ${VEA}/3_mapped_reads/${filename}.mr.dremove ${VEA}/3_mapped_reads/${filename}.sort.mr
# echo "finished removing dups"

##Sorting and removing duplicate reads for PH cells used 117 GB of memory and 10 CPUs; about 1.25 hours running time"
##132 GB of memory for SC_beta cells and 10 CPUs; ~1 hour running time"

##Estimating bisulfite conversion rate, defined as the rate at which unmethylated cytosines in the sample appear as Ts in the sequenced reads##
##Match the positions in reads that correspond to presumed unmethylated cytosines (non-CpG cytosines), then compute the ratio of T to (C + T) at these positions##
##If bisfulite reaction was perfect, then the T to (C+T) ratio should be very close to 1; if there is no bisulfite treatment, then this ratio should be close to 0##
echo "estimate bisulfite conversion"
bsrate -c ${GEN} -o ${VEA}/3_mapped_reads/${filename}.bsrate ${VEA}/3_mapped_reads/${filename}.mr.dremove
echo "finished estimating bisulfite conversion"

##Computing single-site methylation levels##
##Methylation levels at each genomic cytosine are calculated, with the option to produce only levels for CpG-context cytosines##
echo "compute single-site methylation levels for all C's"
methcounts -c ${GEN} -o ${VEA}/4_meth_reads/${filename}.all.meth ${VEA}/3_mapped_reads/${filename}.mr.dremove
echo "finished computing single-site methylation levels for all C's"

##Create separate files with just methylation levels of CpG-context cytosines##
#grep CpG ${VEA}/4_meth_reads/${filename}.all.meth > ${VEA}/4_meth_reads/${filename}_CpG.meth

##Get methylation rate for only symmetric CpG context cytosines, where the CpG C is methylated on both coding (sense) and template (antisense) strands##
##Each CpG pair generated by methcounts will be merged to one using the symmetric-cpgs program##
##'m' flag keeps mutated CpG sites##
echo "compute methylation rate for only symmetric CpG C's"
symmetric-cpgs -m -o ${VEA}/4_meth_reads/${filename}_CpG.meth ${VEA}/4_meth_reads/${filename}.all.meth
echo "finished computing methylation rate for only symmetric CpG C's"

##Computation of methylation level statistics for different context C's##
##levels program computes statistics for the output of methcounts##
echo "compute methylation levels for different context C's"
levels -o ${VEA}/4_meth_reads/${filename}.levels ${VEA}/4_meth_reads/${filename}.all.meth
echo "finished computing methylation levels for different context C's"

##Scan for hypomethylated regions (HMRs). This tool is geared primarily for WGBS data##
##Only considering methylation level at CpG sites, as the level of non-CpG methylation is not usually more than a few perfect##
##The hmr program uses a hidden Markov model (HMM) approach using a Beta-Binomial distribution to describe methylation levels at individual sites while accounting for the number of reads informing those levels##
##hmr automatically learns the average methylation levels inside and outside the HMRs, and also the average size of those HMRs##
echo "call hmrs"
hmr -p ${VEA}/5_hmrs/${filename}.hmr.params -o ${VEA}/5_hmrs/${filename}.hmr ${VEA}/4_meth_reads/${filename}_CpG.meth
echo "finished calling hmrs"

#Generate epiread formate files for use in other downstream methpipe tools such as finding DMRs##
echo "generate epireads"
methstates -c ${GEN} -o ${VEA}/6_epireads/${filename}.epiread ${VEA}/3_mapped_reads/${filename}.mr.dremove
echo "finished generating epireads"

##Generate bigWig track for coverage (in terms of reads) for symmetric CpGs##
##6th column is the number of reads (or coverage) overlapping with that CpG site##
##bigWig format is needed to view the methylation level or read coverage at individual CpG sites in a genome browser such as UCSC##
##bigWig = 'signal' file; it serves as the browser version of continuous data; compressed version of bedGraph
echo "bigWig for coverage"
awk '{OFS="\t"; print $1,$2,$2+1,$6}' < ${VEA}/4_meth_reads/${filename}_CpG.meth | wigToBigWig /dev/stdin ${SIZES} ${VEA}/7_tracks/${filename}_CpG.reads.bw
echo "bigWig done for coverage"

##Generate bigWig of methylation levels for symmetric CpGs##
##5th column is the estimated methylation level, equal to the number of Cs in reads at position corresponding to the site, divided by the sum of the Cs and Ts mapping to that position
echo "bigWig for methylation levels"
awk '{OFS="\t"; print $1,$2,$2+1,$5}' < ${VEA}/4_meth_reads/${filename}_CpG.meth | wigToBigWig /dev/stdin ${SIZES} ${VEA}/7_tracks/${filename}_CpG.meth.bw
echo "bigWig done for methylation levels"

##Generate bigBed file of genomic intervals called as hypomethylated regions##
##Use bigBed files to create bigBed browser tracks for HMRs in UCSC, for example##
##BigBed = 'region' file; represents regions with concrete boundaries like HMRs; compressed version of bed file
echo "create BB file"
cut -f 1-3 ${VEA}/5_hmrs/${filename}.hmr > ${VEA}/7_tracks/${filename}.hmr.tmp
bedToBigBed ${VEA}/7_tracks/${filename}.hmr.tmp ${SIZES} ${VEA}/7_tracks/${filename}.hmr.bb && rm ${VEA}/7_tracks/${filename}.hmr.tmp
echo "BB file done"

date
pwd

##bigWig and bedGraph are both way friendlier to display for your computer; only require loading into memory the portion of the file represented by your view window rather than the entire file##
